---
name: Unit Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: read-all

jobs:
  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2022]
        build: [Bazel, Cargo]
    name: ${{ matrix.build }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: >- # v4.1.1
          actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Install Nix
        if: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos') }}
        uses: >- # v22
          cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # - name: Mount Nix cache
      #   if: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos') }}
      #   uses: >- # v3.3.2
      #     actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
      #   with:
      #     # Don't use of matrix.os since Nix is reproducible across OS versions.
      #     key: ${{ runner.os }}-nix-${{ hashFiles(
      #         flake.nix
      #         flake.lock
      #       ) }}
      #     path: ~/nix
      #     restore-keys: |
      #       ${{ runner.os }}-nix-
      - name: Setup Nix Cache
        if: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos') }}
        uses: >- # Custom commit, last pinned at 2023.10.28.
          DeterminateSystems/magic-nix-cache-action@a04e6275a6bea232cd04fc6f3cbf20d4cb02a3e1

      - name: Determine Bazel cache mountpoint
        if: ${{ matrix.build == 'Bazel' }}
        id: bazel-cache
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "mountpoint=~/.cache/bazel" >> "$GITHUB_OUTPUT"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "mountpoint=C:/tmp" >> "$GITHUB_OUTPUT"
          else
            echo "Unknown runner OS: $RUNNER_OS"
            exit 1
          fi
        shell: bash

      - name: Mount bazel cache
        if: ${{ matrix.build == 'Bazel' }}
        uses: >- # v3.3.2
          actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: ${{ steps.bazel-cache.outputs.mountpoint }}
          key: ${{ matrix.os }}-bazel-${{
            hashFiles(
              '.bazelversion',
              '.bazelrc',
              'WORKSPACE',
              'WORKSPACE.bazel',
              'MODULE.bazel',
              'Cargo.Bazel.lock'
            ) }}
          restore-keys: |
            ${{ matrix.os }}-bazel-

      - name: Run Bazel tests
        if: ${{ matrix.build == 'Bazel' }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            nix develop -c bazel test //...
          elif [ "$RUNNER_OS" == "Windows" ]; then
            bazelisk \
              --output_user_root=${{ steps.bazel-cache.outputs.mountpoint }} \
              test \
              --config=windows \
              //...
          else
            echo "Unknown runner OS: $RUNNER_OS"
            exit 1
          fi
        shell: bash

      - name: Run Cargo tests
        if: ${{ matrix.build == 'Cargo' }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            nix develop -c cargo test --all
          elif [ "$RUNNER_OS" == "Windows" ]; then
            cargo test --all
          else
            echo "Unknown runner OS: $RUNNER_OS"
            exit 1
          fi
        shell: bash

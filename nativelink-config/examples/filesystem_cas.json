// This configuration will place objects in various folders in
// `/tmp/nativelink/data`. It will store all data on disk and
// allows for restarts of the underlying service. It is optimized
// so objects are compressed, deduplicated and uses some in-memory
// optimizations for certain hot paths.
{
  "stores": [
    {
      "name": "FS_CONTENT_STORE",
      "kind": "compression",
      "spec": {
        "compression_algorithm": {
          "lz4": {}
        },
        "backend": {
          "name": "fs-conent",
          "kind": "filesystem",
          "spec": {
            "content_path": "/tmp/nativelink/data/content_path-cas",
            "temp_path": "/tmp/nativelink/data/tmp_path-cas",
            "eviction_policy": {
              "max_bytes": "2Gb",
            }
          }
        }
      }
    }, {
      "name": "CAS_MAIN_STORE",
      "kind": "verify",
      "spec": {
        "backend": {
          // Because we are using a dedup store, we can bypass small objects
          // and put those objects directly into the content store without
          // having to be indexed. This greatly improves performance of serving
          // general build content, since many objects are quite small and by
          // putting this size distinguish store in place will prevent 1+ index
          // read/write per small object request.
          "name": "cas-parts",
          "kind": "sizePartitioning",
          "spec": {
            "size": 262144, // 256k.
            "lower_store": {
              "name": "cas-lower",
              "kind": "ref",
              "spec": {
                "name": "FS_CONTENT_STORE"
              }
            },
            "upper_store": {
              "name": "cas-upper",
              "kind": "dedup",
              "spec": {
                "index_store": {
                  // Since our index store is queried so much, we use a fast_slow
                  // store so it will keep in memory objects that are accessed
                  // frequently before going to disk.
                  // Note: indexes are generally quite small, but accessed frequently.
                  "name": "cas-index",
                  "kind": "fastSlow",
                  "spec": {
                    "fast": {
                      "name": "cas-index-fast",
                      "kind": "memory",
                      "spec": {
                        "eviction_policy": {
                          "max_bytes": "10Mb",
                        }
                      }
                    },
                    "slow": {
                      "name": "cas-index-slow",
                      "kind": "filesystem",
                      "spec": {
                        "content_path": "/tmp/nativelink/data/content_path-index",
                        "temp_path": "/tmp/nativelink/data/tmp_path-index",
                        "eviction_policy": {
                          "max_bytes": "500Mb",
                        }
                      }
                    }
                  }
                },
                "content_store": {
                  "name": "cas-content",
                  "kind": "ref",
                  "spec": {
                    "name": "FS_CONTENT_STORE"
                  }
                }
              }
            }
          }
        },
        "verify_size": true,
        "verify_hash": true
      }
    }, {
      "name": "AC_MAIN_STORE",
      "kind": "filesystem",
      "spec": {
        "content_path": "/tmp/nativelink/data/content_path-ac",
        "temp_path": "/tmp/nativelink/data/tmp_path-ac",
        "eviction_policy": {
          "max_bytes": "500Mb",
        }
      }
    }
  ],
  "schedulers": [
    {
      "name": "MAIN_SCHEDULER",
      "kind": "simple",
      "spec": {
        "supported_platform_properties": {
          "cpu_count": "minimum",
          "memory_kb": "minimum",
          "network_kbps": "minimum",
          "disk_read_iops": "minimum",
          "disk_read_bps": "minimum",
          "disk_write_iops": "minimum",
          "disk_write_bps": "minimum",
          "shm_size": "minimum",
          "gpu_count": "minimum",
          "gpu_model": "exact",
          "cpu_vendor": "exact",
          "cpu_arch": "exact",
          "cpu_model": "exact",
          "kernel_version": "exact",
          "docker_image": "priority",
        }
      }
    }
  ],
  "servers": [{
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50051"
      }
    },
    "services": {
      "cas": {
        "main": {
          "cas_store": "CAS_MAIN_STORE"
        }
      },
      "ac": {
        "main": {
          "ac_store": "AC_MAIN_STORE"
        }
      },
      "execution": {
        "main": {
          "cas_store": "CAS_MAIN_STORE",
          "scheduler": "MAIN_SCHEDULER",
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER",
          }
        }
      },
      "bytestream": {
        "cas_stores": {
          "main": "CAS_MAIN_STORE",
        }
      }
    }
  }, {
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50061"
      }
    },
    "services": {
      // Note: This should be served on a different port, because it has
      // a different permission set than the other services.
      // In other words, this service is a backend api. The ones above
      // are a frontend api.
      "worker_api": {
        "scheduler": "MAIN_SCHEDULER",
      },
      "health": {},
    }
  }]
}

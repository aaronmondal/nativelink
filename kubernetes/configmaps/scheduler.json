{
  "stores": [
    {
      // Note: This file is used to test GRPC store.
      "name": "GRPC_LOCAL_STORE",
      "kind": "grpc",
      "spec": {
        "instance_name": "main",
        "endpoints": [
          {"address": "grpc://${CAS_ENDPOINT:-127.0.0.1}:50051"}
        ],
        "store_type": "cas"
      }
    }, {
      // Note: This file is used to test GRPC store.
      "name": "GRPC_LOCAL_AC_STORE",
      "kind": "grpc",
      "spec": {
        "instance_name": "main",
        "endpoints": [
          {"address": "grpc://${CAS_ENDPOINT:-127.0.0.1}:50051"}
        ],
        "store_type": "ac"
      }
    }
  ],
  "schedulers": [
    {
      // TODO(adams): use the right scheduler because reclient doesn't use the cached results?
      // TODO(adams): max_bytes_per_stream
      "name": "MAIN_SCHEDULER",
      "kind": "simple",
      "spec": {
        "supported_platform_properties": {
          "cpu_count": "priority",
          "memory_kb": "priority",
          "network_kbps": "priority",
          "disk_read_iops": "priority",
          "disk_read_bps": "priority",
          "disk_write_iops": "priority",
          "disk_write_bps": "priority",
          "shm_size": "priority",
          "gpu_count": "priority",
          "gpu_model": "priority",
          "cpu_vendor": "priority",
          "cpu_arch": "priority",
          "cpu_model": "priority",
          "kernel_version": "priority",
          "OSFamily": "priority",
          "container-image": "priority",
        }
      }
    }
  ],
  "servers": [{
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50052"
      }
    },
    "services": {
      "ac": {
        "main": {
          "ac_store": "GRPC_LOCAL_AC_STORE"
        }
      },
      "execution": {
        "main": {
          "cas_store": "GRPC_LOCAL_STORE",
          "scheduler": "MAIN_SCHEDULER",
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER",
          }
        }
      }
    }
  },
  {
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50061",
      }
    },
    "services": {
      // Note: This should be served on a different port, because it has
      // a different permission set than the other services.
      // In other words, this service is a backend api. The ones above
      // are a frontend api.
      "worker_api": {
        "scheduler": "MAIN_SCHEDULER",
      },
      "health": {},
    }
  }]
}

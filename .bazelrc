# Copyright 2022 The NativeLink Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use blake3 as digest function instead of the much slower default sha256.
startup --digest_function=blake3
common --enable_platform_specific_config

# TODO(aaronmondal): Remove this once we get the build working without it.
common --noincompatible_sandbox_hermetic_tmp

# Don't leak PATH and LD_LIBRARY_PATH into the build.
build --incompatible_strict_action_env

# Don't use legacy toolchain resolution.
build --incompatible_enable_cc_toolchain_resolution

# Use the earliest supported C++ version for protoc.
build --cxxopt=-std=c++14 --host_cxxopt=-std=c++14

build --test_output=errors

build:debug -c dbg

build:self_test --remote_instance_name=main
build:self_test --remote_cache=grpc://127.0.0.1:50051

build:self_execute --remote_executor=grpc://127.0.0.1:50052
build:self_execute --remote_instance_name=main
build:self_execute --remote_default_exec_properties=cpu_count=1
build:self_execute --platform_suffix=self-execute

build --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect

# TODO(aaronmondal): Extend these flags until we can run with clippy::pedantic.
build --@rules_rust//:clippy_flags=-D,clippy::uninlined_format_args

test --@rules_rust//:rustfmt.toml=//:.rustfmt.toml

# This will make rustfmt and clippy only run on `bazel test`.
test --output_groups=+rustfmt_checks
test --output_groups=+clippy_checks

# Optional nightly toolchain. Mostly useful for running sanitizers.
build:nightly --@rules_rust//rust/toolchain/channel=nightly

# AddressSanitizer to detect memory leaks.
build:asan --config=nightly
build:asan --@rules_rust//:extra_rustc_flags=-Zsanitizer=address

# ThreadSanitizer to detect data races. Tests under tsan shouldn't be cached
# since they tend to produce irreproducible false negatives.
build:tsan --config=nightly -c dbg
build:tsan --@rules_rust//:extra_rustc_flags=-Zsanitizer=thread
build:tsan --cache_test_results=no
build:tsan --run_under=//tools:tsan.sh

# Configuration options for Windows builds.
startup --windows_enable_symlinks
build:windows --cxxopt=/std:c++14 --host_cxxopt=/std:c++14
build:windows --enable_runfiles

# Global rust toolchain configuration. Deferred to here so that the cc
# toolchains are resolved before the rust toolchains.
# build --extra_toolchains=@rust_toolchains//:all

# Local Remote Execution.
build:lre --extra_execution_platforms=@local-remote-execution//generated-cc/config:platform
build:lre --extra_toolchains=@local-remote-execution//generated-cc/config:cc-toolchain"
build:lre --extra_toolchains=@local-remote-execution//generated-java/java:all"

# See: https://github.com/bazelbuild/bazel/issues/19714#issuecomment-1745604978
build:lre --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# TODO(aaronmondal): Remove when https://github.com/bazelbuild/bazel/issues/7254
#                    is resolved.
build:lre --define=EXECUTOR=remote

# rules_rust doesn't properly work with remote execution.
#
# Note(aaronmondal): It's technically possible to run this build in some remote
# execution images, such as ubuntu-based images. Those images only pretend to be
# reproducible (think /usr/bin/clang which could be any version of clang). This
# disables anything that doesn't "properly" execute remotely.
common:lre --strategy=Rustc=local
common:lre --strategy=CargoBuildScriptRun=local
common:lre --strategy=Rustfmt=local
common:lre --strategy=Clippy=local
common:lre --strategy=TestRunner=local
common:lre --strategy=Rustdoc=local
common:lre --strategy=Genrule=local # Genrules break remotely as well.

# Allow user-side customization.
try-import %workspace%/.bazelrc.user

load("@rules_rust//rust:defs.bzl", "rust_binary")
load(
    "@rules_rust//rust:toolchain.bzl",
    "rust_stdlib_filegroup",
    "rust_toolchain",
)

exports_files(
    [
        ".rustfmt.toml",
    ],
    visibility = ["//visibility:public"],
)

rust_binary(
    name = "nativelink",
    srcs = [
        "src/bin/nativelink.rs",
    ],
    deps = [
        "//nativelink-config",
        "//nativelink-error",
        "//nativelink-proto",
        "//nativelink-scheduler",
        "//nativelink-service",
        "//nativelink-store",
        "//nativelink-util",
        "//nativelink-worker",
        "@crates//:async-lock",
        "@crates//:axum",
        "@crates//:clap",
        "@crates//:console-subscriber",
        "@crates//:futures",
        "@crates//:hyper",
        "@crates//:mimalloc",
        "@crates//:parking_lot",
        "@crates//:prometheus-client",
        "@crates//:rustls-pemfile",
        "@crates//:scopeguard",
        "@crates//:serde_json5",
        "@crates//:tokio",
        "@crates//:tokio-rustls",
        "@crates//:tonic",
        "@crates//:tower",
        "@crates//:tracing",
        "@crates//:tracing-subscriber",
    ],
)

genrule(
    name = "dummy_test_sh",
    outs = ["dummy_test.sh"],
    cmd = "echo \"sleep .1;   echo $$(printf '=%.0s' {1..100})\" > \"$@\"",
)

sh_test(
    name = "dummy_test",
    timeout = "short",
    srcs = [":dummy_test_sh"],
)

# ROOT = "//nix/store/n650asyragmcrpggbjjg86h6jksy1n69-rust-default-1.77.2"
# NIGHTLY = "/nix/store/0gb7d2rdpgjglgjf21d0pdbaa62n0y6a-rust-default-1.79.0-nightly-2024-04-03"
ROOT = "stable-rust"

[
    filegroup(
        name = toolname,
        srcs = [
            "{}/bin/{}".format(ROOT, toolname),
        ],
        visibility = ["//visibility:public"],
    )
    for toolname in [
        "rustc",
        "rustfmt",
        "cargo",
        "clippy-driver",
        "rustdoc",
    ]
]

filegroup(
    name = "rustc_lib",
    srcs = glob(
        [
            "{}/{}".format(ROOT, libname)
            for libname in [
                "bin/*.so",
                "lib/*.so",
                "lib/rustlib/*/codegen-backends/*.so",
                "lib/rustlib/*/codegen-backends/*.dylib",
                "lib/rustlib/*/bin/rust-lld",
                "lib/rustlib/*/lib/*.so",
                "lib/rustlib/*/lib/*.dylib",
            ]
        ],
        allow_empty = True,
    ),
    visibility = ["//visibility:public"],
)

rust_stdlib_filegroup(
    name = "rust_std",
    srcs = glob(
        [
            "{}/{}".format(ROOT, libname)
            for libname in [
                "lib/rustlib/*/lib/*.rlib",
                "lib/rustlib/*/lib/*.so",
                "lib/rustlib/*/lib/*.dylib",
                "lib/rustlib/*/lib/*.a",
                "lib/rustlib/*/lib/self-contained/**",
            ]
        ],
        # Some patterns (e.g. `lib/*.a`) don't match anything, see https://github.com/bazelbuild/rules_rust/pull/245
        allow_empty = True,
    ),
    visibility = ["//visibility:public"],
)

rust_toolchain(
    name = "rust_nix_impl",
    binary_ext = "",
    cargo = ":cargo",
    clippy_driver = ":clippy-driver",
    default_edition = "2021",
    dylib_ext = ".so",  # TODO(aaronmondal): .dylib on macos.
    exec_triple = "x86_64-unknown-linux-gnu",  # TODO: others.
    rust_doc = ":rustdoc",
    rust_std = ":rust_std",
    rustc = ":rustc",
    rustc_lib = ":rustc_lib",
    rustfmt = ":rustfmt",
    staticlib_ext = ".a",
    stdlib_linkflags = [
        "-lpthread",
        "-ldl",
    ],  # Correct??
    target_triple = "x86_64-unknown-linux-gnu",  # TODO: others.
    # exec_triple = "${{build-triple}}",
    # target_triple = "${{target-triple}}",
    # default_edition = "{default_edition}",
    # stdlib_linkflags = {stdlib_linkflags},
    visibility = ["//visibility:public"],
)

toolchain(
    name = "rust_nix",
    toolchain = ":rust_nix_impl",
    # toolchain = "@{toolchain_repo}//:rust_nix_impl",
    toolchain_type = "@rules_rust//rust:toolchain",

    # target_compatible_with = ["@local_config_platform//:host"],
    # exec_compatible_with = [
    #     "@platforms//os:linux",
    #     "@platforms//cpu:x86_64",
    #     "@bazel_tools//tools/cpp:clang",
    # ],
    # exec_compatible_with = {exec_constraints},
    # target_compatible_with = {target_constraints},
)
